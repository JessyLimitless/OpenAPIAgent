from PyPDF2 import PdfReader
from langchain.embeddings import SentenceTransformerEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationalRetrievalChain
from langchain.memory import ConversationBufferWindowMemory
from langchain.vectorstores import FAISS
from langchain.text_splitter import RecursiveCharacterTextSplitter

OPENAI_API_KEY = ""

def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(
        separators=["\n"],  # 문자열 이스케이프 문제 수정
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(text)
    return chunks

def get_vectorstore(text_chunks):
    embeddings = SentenceTransformerEmbeddings(model_name='all-MiniLM-L6-v2')
    vectorstore = FAISS.from_texts(texts=text_chunks, embedding=embeddings)
    return vectorstore    

def get_conversation_chain(vectorstore):
    memory = ConversationBufferWindowMemory(memory_key='chat_history', return_messages=True, window_size=10)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=ChatOpenAI(temperature=0, model_name='gpt-3.5-turbo', openai_api_key=OPENAI_API_KEY),
        retriever=vectorstore.as_retriever(),
        memory=memory
    )
    return conversation_chain

pdf_file_path = input("PDF 파일 경로를 입력하세요: ")
pdf_docs = [pdf_file_path]

raw_text = get_pdf_text(pdf_docs)
text_chunks = get_text_chunks(raw_text)
vectorstore = get_vectorstore(text_chunks)
conversation = get_conversation_chain(vectorstore)

chat_history = []

def ask_question(question):
    global chat_history
    chat_history.append({"role": "user", "content": question})
    result = conversation({
        "question": question,
        "chat_history": chat_history
    })
    response = result["answer"]
    chat_history.append({"role": "assistant", "content": response})
    return response

while True:
    question = input("질문을 입력하세요 (종료하려면 '종료' 입력): ")
    if question.lower() == "종료":
        print("대화를 종료합니다.")
        break
    response = ask_question(question)
    print("응답:", response)

위 코드는 주피터노트북에서 실행되는 PDF문서 기반형 챗봇입니다.파일 경로 대신 사용자가 파일을 업로드 하는 방식으로 변경해 주세요. 여기에 스트림릿을 사용해서 화면을 만들어 주세요.
